data = readtable("Waypoint list.xlsx");
datalen = size(data,1);

%% Preprocessing
% dms to radians
for i = 1:datalen
    d = sscanf(data{i,2}{1}, '%d° %d'' %f"');
    d = dms2degrees(d');
    if contains(data{i,2}{1}, 'S')
        data{i,2}{1} = -d;
    else
        data{i,2}{1} = d;
    end
    d = sscanf(data{i,3}{1}, '%d° %d'' %f"');
    d = dms2degrees(d');
    if contains(data{i,3}{1}, 'W')
        data{i,3}{1} = -d;
    else
        data{i,3}{1} = d;
    end
end

% Cell to Mat
wplat = cell2mat(data{:,2});
wplon = cell2mat(data{:,3});

%% Draw US map and waypoints
load usapolygon.mat
figure(1)
clf
geoplot(uslat,uslon,"--")
hold on
geoscatter(wplat,wplon,[],"m")

%% RRG

% % Define origin and destination
% origin = [wplat(1), wplon(1)];  % Modify as needed
% destination = [wplat(end), wplon(end)];
% 
% % Parameters for RRG
% num_samples = 10000;   % Number of waypoints to sample for the graph
% radius = 1.5;        % Connection radius (degrees)
% 
% % Construct RRG
% G = graph(); % Initialize an empty graph
% node_coords = [origin]; % Start with the origin node
% G = addnode(G, table(1, origin(1), origin(2), 'VariableNames', {'ID', 'Lat', 'Lon'}));
% 
% % Sample waypoints to build the graph
% for i = 1:num_samples
%     idx = randi(datalen);  % Randomly pick a waypoint
%     new_wp = [wplat(idx), wplon(idx)];
% 
%     % Find nearby waypoints within a given radius
%     distances = vecnorm(node_coords - new_wp, 2, 2); % Euclidean distance
%     nearby_nodes = find(distances < radius);
% 
%     % Add new waypoint to graph
%     G = addnode(G, table(i+1, new_wp(1), new_wp(2), 'VariableNames', {'ID', 'Lat', 'Lon'}));
%     node_coords = [node_coords; new_wp]; % Append to list
% 
%     % Connect to nearby nodes
%     for j = 1:length(nearby_nodes)
%         G = addedge(G, nearby_nodes(j), i+1, distances(nearby_nodes(j)));
%     end
% end
% 
% % Add the destination
% G = addnode(G, table(num_samples+2, destination(1), destination(2), 'VariableNames', {'ID', 'Lat', 'Lon'}));
% distances = vecnorm(node_coords - destination, 2, 2);
% nearby_nodes = find(distances < radius);
% for j = 1:length(nearby_nodes)
%     G = addedge(G, nearby_nodes(j), num_samples+2, distances(nearby_nodes(j)));
% end

%% Compute K-Shortest Paths using Yen’s Algorithm (DISTINCT PATHS)
G = load("US_waypoint_graph.mat");
G = G.G;
node_coords = G.Nodes{:,2:3};

K = 5; % Number of alternative paths
all_paths = cell(K,1); % Store all paths
all_path_distances = zeros(K,1);

% Compute the first shortest path using Dijkstra
start_idx = 31; % Origin node index
end_idx = 1215;
%1215 - Houston, 31 - Seattle
% end_idx = num_samples + 2; % Destination node index
[all_paths{1}, all_path_distances(1)] = shortestpath(G, start_idx, end_idx);

% Find alternative paths ensuring distinct routes
for k = 2:K
    max_attempts = 5; % Maximum retries to find a unique path
    attempt = 0;
    unique_path_found = false;
    
    while ~unique_path_found && attempt < max_attempts
        attempt = attempt + 1;
        
        % Create a temporary graph by increasing the weight of the previous paths
        G_temp = G;
        
        % Penalize edges used in the previous paths
        for prev_k = 1:k-1
            for i = 1:length(all_paths{prev_k})-1
                edge_idx = findedge(G_temp, all_paths{prev_k}(i), all_paths{prev_k}(i+1));
                if edge_idx > 0
                    G_temp.Edges.Weight(edge_idx) = G_temp.Edges.Weight(edge_idx) * (5 + 10*attempt); % Increase penalty progressively
                end
            end
        end
        
        % Compute the next shortest path
        [candidate_path, candidate_distance] = shortestpath(G_temp, start_idx, end_idx);
        
        % Check if the new path is distinct
        is_duplicate = any(cellfun(@(p) isequal(p, candidate_path), all_paths(1:k-1)));
        
        % Accept path if unique
        if ~is_duplicate
            all_paths{k} = candidate_path;
            all_path_distances(k) = candidate_distance;
            unique_path_found = true;
        end
    end

    % disp(["Search done: ",k,"-th"])
    
    % If no unique path found after max_attempts, break out
    if ~unique_path_found
        warning('Could not find %d distinct paths. Stopping at %d.', K, k-1);
        K = k-1; % Adjust K to reflect actual number of paths found
        break;
    end
end



%% Plot results
figure(2);
clf;
geoplot(wplat, wplon, 'm.','MarkerSize',2); % Plot all waypoints
hold on;
geoplot(node_coords(:,1), node_coords(:,2), 'b.', 'MarkerSize', 8); % Graph nodes
geoplot(node_coords(start_idx,1),node_coords(start_idx,2),'r*','MarkerSize',8,'LineWidth',5)
geoplot(node_coords(end_idx,1),node_coords(end_idx,2),'b*','MarkerSize',8,'LineWidth',5)

% Plot multiple paths with different colors
colors = {'r-', 'g-', 'c-','m-','y-'};
for k = 1:K
    path_lats = G.Nodes.Lat(all_paths{k});
    path_lons = G.Nodes.Lon(all_paths{k});
    % geoplot(path_lats, path_lons, colors{k}, 'LineWidth', 2);
    geoplot(path_lats, path_lons, '-', 'LineWidth', 3, 'Color', [rand(1,3) 0.6]);
end

geoplot(node_coords(start_idx,1),node_coords(start_idx,2),'r*','MarkerSize',8,'LineWidth',5)
geoplot(node_coords(end_idx,1),node_coords(end_idx,2),'b*','MarkerSize',8,'LineWidth',5)

legend('Waypoints','Origin','Destination');
title('RRG with Multiple Alternative Paths');
hold off;

set(gcf,"Position",[0 0 1200 800])
geolimits([13 57],[-130 -60])